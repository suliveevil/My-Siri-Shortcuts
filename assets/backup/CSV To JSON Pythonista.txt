<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>WFWorkflowActions</key>
	<array>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.comment</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>WFCommentActionText</key>
				<string>The script content is in the next comment below. Copy that content and add it as a new script in Pythonista named "Parse CSV for Shortcuts.py"

1. This shortcut REQUIRES the app Pythonista to run.
2. Receives CSV file content and returns a list of dictionaries that Shortcuts can use (JSON). 
3. This is intended to be used as a module in other Shortcuts. So, use a “Run Shortcut” step, and then the following step should probably be a repeat with each to do something with each field.
4. This is a much more reliable CSV parser rather than using a split text by comma, and deals with commas and line breaks in fields, for example.
</string>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.comment</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>WFCommentActionText</key>
				<string>import csv, sys, json, clipboard,io,tempfile, webbrowser

CSVdata = sys.argv[1]#, sys.argv[2]
print('test ', CSVdata)

tmp = tempfile.TemporaryFile(mode='w+t',encoding='UTF-8')

tmp.write(CSVdata)
tmp.seek(0)
#print(tmp.read())

#csvFilePath = "CSV Variable for Shortcuts.csv"
#jsonFilePath = "JSON Variable for Shortcut Dic.json"
arr = []
#read the csv and add the arr to an array

with open (tmp.name, 'rt', encoding='utf8') as csvFile:
    csvReader = csv.DictReader(csvFile)
    print(csvReader)
    for csvRow in csvReader:
        arr.append(csvRow)

#print(arr)

asText = json.dumps(arr)
print(asText)
clipboard.set(asText)

url = "shortcuts://"
webbrowser.open(url)

# write the data to a json file
#with open(jsonFilePath, "w") as jsonFile:
#    jsonFile.write(json.dumps(arr, indent = 4))</string>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.detect.text</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>UUID</key>
				<string>E88733F3-6E55-4F30-BD72-025167B39392</string>
				<key>WFInput</key>
				<dict>
					<key>Value</key>
					<dict>
						<key>Type</key>
						<string>ExtensionInput</string>
					</dict>
					<key>WFSerializationType</key>
					<string>WFTextTokenAttachment</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.list</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>UUID</key>
				<string>CA2DF965-D59B-42EA-BDEF-4E22E4AC6C11</string>
				<key>WFItems</key>
				<array>
					<dict>
						<key>WFItemType</key>
						<integer>0</integer>
						<key>WFValue</key>
						<dict>
							<key>Value</key>
							<dict>
								<key>attachmentsByRange</key>
								<dict>
									<key>{0, 1}</key>
									<dict>
										<key>OutputName</key>
										<string>Text</string>
										<key>OutputUUID</key>
										<string>E88733F3-6E55-4F30-BD72-025167B39392</string>
										<key>Type</key>
										<string>ActionOutput</string>
									</dict>
								</dict>
								<key>string</key>
								<string>￼</string>
							</dict>
							<key>WFSerializationType</key>
							<string>WFTextTokenString</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>com.omz-software.Pythonista.runscript</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>PythonistaArgs</key>
				<dict>
					<key>Value</key>
					<dict>
						<key>attachmentsByRange</key>
						<dict>
							<key>{0, 1}</key>
							<dict>
								<key>OutputName</key>
								<string>列表</string>
								<key>OutputUUID</key>
								<string>CA2DF965-D59B-42EA-BDEF-4E22E4AC6C11</string>
								<key>Type</key>
								<string>ActionOutput</string>
							</dict>
						</dict>
						<key>string</key>
						<string>￼</string>
					</dict>
					<key>WFSerializationType</key>
					<string>WFTextTokenString</string>
				</dict>
				<key>PythonistaScript</key>
				<string>Parse CSV for Shortcuts.py</string>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.getclipboard</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>UUID</key>
				<string>D22581E1-1CF5-4430-A741-AAFAC800A172</string>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.detect.dictionary</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>UUID</key>
				<string>F4B84E80-4A9C-4B91-91A8-105C5EE05F38</string>
				<key>WFInput</key>
				<dict>
					<key>Value</key>
					<dict>
						<key>OutputName</key>
						<string>剪贴板</string>
						<key>OutputUUID</key>
						<string>D22581E1-1CF5-4430-A741-AAFAC800A172</string>
						<key>Type</key>
						<string>ActionOutput</string>
					</dict>
					<key>WFSerializationType</key>
					<string>WFTextTokenAttachment</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>WFWorkflowActionIdentifier</key>
			<string>is.workflow.actions.comment</string>
			<key>WFWorkflowActionParameters</key>
			<dict>
				<key>WFCommentActionText</key>
				<string>Returns an array of dictionaries</string>
			</dict>
		</dict>
	</array>
	<key>WFWorkflowClientRelease</key>
	<string>3.0</string>
	<key>WFWorkflowClientVersion</key>
	<string>1050.22</string>
	<key>WFWorkflowIcon</key>
	<dict>
		<key>WFWorkflowIconGlyphNumber</key>
		<integer>59771</integer>
		<key>WFWorkflowIconStartColor</key>
		<integer>4282601983</integer>
	</dict>
	<key>WFWorkflowImportQuestions</key>
	<array>
		<dict>
			<key>ActionIndex</key>
			<integer>0</integer>
			<key>Category</key>
			<string>Parameter</string>
			<key>DefaultValue</key>
			<string>The script content is in the next comment below. Copy that content and add it as a new script in Pythonista named "Parse CSV for Shortcuts.py"

1. This shortcut REQUIRES the app Pythonista to run.
2. Receives CSV file content and returns a list of dictionaries that Shortcuts can use (JSON). 
3. This is intended to be used as a module in other Shortcuts. So, use a “Run Shortcut” step, and then the following step should probably be a repeat with each to do something with each field.
4. This is a much more reliable CSV parser rather than using a split text by comma, and deals with commas and line breaks in fields, for example.
</string>
			<key>ParameterKey</key>
			<string>WFCommentActionText</string>
			<key>Text</key>
			<string>1. This shortcut REQUIRES the app Pythonista to run.
2. Receives CSV file content and returns a list of dictionaries that Shortcuts can use (JSON). 
3. This is intended to be used as a module in other Shortcuts. So, use a “Run Shortcut” step, and then the following step should probably be a repeat with each to do something with each field.
4. This is a much more reliable CSV parser rather than using a split text by comma, and deals with commas and line breaks in fields, for example.
</string>
		</dict>
	</array>
	<key>WFWorkflowInputContentItemClasses</key>
	<array>
		<string>WFGenericFileContentItem</string>
		<string>WFRichTextContentItem</string>
		<string>WFSafariWebPageContentItem</string>
		<string>WFStringContentItem</string>
	</array>
	<key>WFWorkflowMinimumClientVersion</key>
	<integer>900</integer>
	<key>WFWorkflowMinimumClientVersionString</key>
	<string>900</string>
	<key>WFWorkflowTypes</key>
	<array>
		<string>NCWidget</string>
		<string>WatchKit</string>
		<string>ActionExtension</string>
	</array>
</dict>
</plist>
